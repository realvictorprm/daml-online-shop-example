{-# LANGUAGE DerivingStrategies #-}
-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module OnlineShop where

import Prelude
import DA.Optional
import Daml.Script
import DA.Foldable (forA_)

infixl 1 &

a & f = f a

everyone = fromSomeNote "This should be everyone" (partyFromText "everyone")
admin = fromSomeNote "This should be admin" (partyFromText "admin")

type ProductName = Text

template ProductInfo
  with
    name: Text
    description: Text
    imageUrl: Text
    price: Decimal
    inventory: Int
  where
    signatory admin
    key name : Text
    maintainer admin
    observer everyone
    ensure price > 0.0 && inventory >= 0

    controller admin can
      ProductInfo_IncrementInventory: ContractId ProductInfo
        do create this with inventory = this.inventory + 1

      ProductInfo_DecrementInventory: ContractId ProductInfo
        do
          assert (inventory > 0)
          create this with inventory = this.inventory - 1

      ProductInfo_SetInventory: ContractId ProductInfo
        with
          newInventory: Int
        do
          assert (newInventory >= 0)
          create this with inventory = newInventory

template Reservation
  with
    customer: Party
    productName: Text
  where
    signatory customer, admin
    key (customer, productName) : (Party, Text)
    maintainer key._1, admin

    ensure customer /= everyone

    controller customer can
      Reservation_CanceledByCustomer: ()
        do
          (productId, _) <- fetchByKey @ProductInfo productName
          _ <- exercise productId ProductInfo_IncrementInventory
          return ()

    controller admin can

      Reservation_CanceledByAdmin: ()
        do
          (productId, _) <- fetchByKey @ProductInfo productName
          _ <- exercise productId ProductInfo_IncrementInventory
          return ()

data OrderStatus =
  ReceivedOrder
  | PreShipping
  | Shipping
  | Shipped
  deriving Eq
  deriving Show

template Order
  with
    customer: Party
    products: [ProductName]
    status: OrderStatus
    timestamp: Time
  where
    signatory customer, admin

template OrderRequest
  with
    customer: Party
    reservations: [ProductName]
  where
    signatory customer
    ensure customer /= everyone
  
    controller admin can
      OrderRequest_Process: ContractId Order
        do
          reservationIds <- reservations & map (\productName -> fetchByKey @Reservation (customer, productName)) & sequence & fmap (map fst)
          forA_ reservationIds $ \cid -> archive cid
          time <- getTime
          create Order with customer, products = reservations, status = ReceivedOrder, timestamp = time

data DeclineReason =
  BasketAlreadyContainsProduct
  | OutOfStock

  deriving Eq
  deriving Show

template DeclinedReservation
  with
    customer: Party
    productName: Text
    reason: DeclineReason
  where
    signatory admin
    observer customer

    controller customer can
      AcknowledgeDeclinedReservation: ()
       do return ()

template CreateReservationRequest
  with
    customer: Party
    productName: Text
  where
    signatory customer
    ensure customer /= everyone

    controller admin can
      TryAcceptReservation: Optional (ContractId Reservation)
        do
          (productId, product) <- fetchByKey @ProductInfo productName
          if product.inventory > 0 then do
            let reservation = Reservation with customer; productName
            doesReservationAlreadyExist <- visibleByKey @Reservation (reservation.customer, productName)
            if doesReservationAlreadyExist then do
              _ <- create DeclinedReservation with customer; productName; reason = BasketAlreadyContainsProduct
              return None
            else do
              reservationId <- create reservation
              _ <- exercise productId ProductInfo_DecrementInventory
              return $ Some reservationId
          else do
            _ <- create DeclinedReservation with customer; productName; reason = OutOfStock
            return None

createProductInfo name description imageUrl price inventory = submit admin do
  createCmd ProductInfo with name; description; imageUrl; price; inventory

availableProducts() = do
  _ <- createProductInfo "PS5" "Nice thing" "" 550.0 100
  _ <- createProductInfo "PS4" "Also nice" "" 200.0 100_000
  query @ProductInfo admin

alice = fromSomeNote "This should be alice" (partyFromText "alice")

testing = do
  products <- availableProducts()
  reservationRequestId <- submit  alice do createCmd CreateReservationRequest with customer = alice; productName = "PS5"
  reservationCreated <- submit admin do exerciseCmd reservationRequestId TryAcceptReservation
  case reservationCreated of
    Some reservationId -> do
      orderReq <- submit alice do createCmd OrderRequest with customer = alice; reservations = ["PS5"]
      order <- submit admin do
              exerciseCmd orderReq OrderRequest_Process
      query @Order alice
    None -> pure []
  
