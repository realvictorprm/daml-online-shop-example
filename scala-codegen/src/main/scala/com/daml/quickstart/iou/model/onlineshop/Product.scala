/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.daml.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.daml.ledger.api.v1.{value=>$u0020rpcvalue}
package com.daml.quickstart.iou.model {
  package OnlineShop {
    final case class Product(name: ` lfdomainapi`.Primitive.Text, inventory: ` lfdomainapi`.Primitive.Int64, reservations: ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation]]) extends ` lfdomainapi`.Template[Product] {
      override protected[this] def templateCompanion(implicit ` d` : ` lfdomainapi`.Compat.DummyImplicit) = Product
    }

    object Product extends ` lfdomainapi`.TemplateCompanion[Product] with _root_.scala.Function3[` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Int64, ` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation]], _root_.com.daml.quickstart.iou.model.OnlineShop.Product] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val name: ` C`[` lfdomainapi`.Primitive.Text];
        val inventory: ` C`[` lfdomainapi`.Primitive.Int64];
        val reservations: ` C`[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation]]];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val name = ` f`(` view`.name);
            override val inventory = ` f`(` view`.inventory);
            override val reservations = ` f`(` view`.reservations)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.OnlineShop, moduleName = "OnlineShop", entityName = "Product");
      final implicit class `Product syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(actor, id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.daml.quickstart.iou.model.DA.Internal.Template.Archive());
        def exerciseProduct_ReservationCompleted(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.OnlineShop.Product_ReservationCompleted)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Product]] = ` exercise`(actor, id, "Product_ReservationCompleted", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseProduct_ReservationCompleted(actor: ` lfdomainapi`.Primitive.Party, reservationId: ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation])(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Product]] = exerciseProduct_ReservationCompleted(actor, _root_.com.daml.quickstart.iou.model.OnlineShop.Product_ReservationCompleted(reservationId));
        def exerciseProduct_WithdrawReservation(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.OnlineShop.Product_WithdrawReservation)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Product]] = ` exercise`(actor, id, "Product_WithdrawReservation", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseProduct_WithdrawReservation(actor: ` lfdomainapi`.Primitive.Party, reservation: com.daml.quickstart.iou.model.OnlineShop.Reservation)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Product]] = exerciseProduct_WithdrawReservation(actor, _root_.com.daml.quickstart.iou.model.OnlineShop.Product_WithdrawReservation(reservation));
        def exerciseProduct_DecrementInventory(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.OnlineShop.Product_DecrementInventory)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Product]] = ` exercise`(actor, id, "Product_DecrementInventory", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseProduct_DecrementInventory(actor: ` lfdomainapi`.Primitive.Party, reservationId: ` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation])(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Product]] = exerciseProduct_DecrementInventory(actor, _root_.com.daml.quickstart.iou.model.OnlineShop.Product_DecrementInventory(reservationId))
      };
      type key = ` lfdomainapi`.Primitive.Text;
      override val consumingChoices: _root_.scala.collection.immutable.Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(_root_.scala.collection.immutable.Set("Archive", "Product_ReservationCompleted", "Product_WithdrawReservation", "Product_DecrementInventory"));
      override def toNamedArguments(` self` : Product) = ` arguments`(scala.Tuple2("name", ` lfdomainapi`.Value.encode(` self`.name)), scala.Tuple2("inventory", ` lfdomainapi`.Value.encode(` self`.inventory)), scala.Tuple2("reservations", ` lfdomainapi`.Value.encode(` self`.reservations)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(3))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "name"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "inventory"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Int64](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "reservations"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation]]](zv2) match {
                    case _root_.scala.Some(z2) => Some(Product(z0, z1, z2))
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val name = lte.field("name", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
          val inventory = lte.field("inventory", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Int64](lte));
          val reservations = lte.field("reservations", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.List[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.OnlineShop.Reservation]]](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.daml.quickstart.iou.model.OnlineShop.Product] = {
        val `recordFields `: lte.RecordFields[_root_.com.daml.quickstart.iou.model.OnlineShop.Product] = lte.RecordFields.xmapN(lte.fields(`view `.name), lte.fields(`view `.inventory), lte.fields(`view `.reservations))({
          case scala.Tuple3(name, inventory, reservations) => _root_.com.daml.quickstart.iou.model.OnlineShop.Product(name, inventory, reservations)
        })({
          case _root_.com.daml.quickstart.iou.model.OnlineShop.Product(name, inventory, reservations) => scala.Tuple3(name, inventory, reservations)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
